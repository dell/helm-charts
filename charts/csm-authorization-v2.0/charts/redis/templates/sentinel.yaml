apiVersion: v1
kind: ServiceAccount
metadata:
  name: sentinel
  namespace: {{ include "custom.namespace" . }}
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: sentinel-tokenreview-binding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: system:auth-delegator
subjects:
  - kind: ServiceAccount
    name: sentinel
    namespace: {{ include "custom.namespace" . }}
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ .Values.sentinel }}
spec:
  serviceName: {{ .Values.sentinel }}
  replicas: {{ .Values.replicas }}
  selector:
    matchLabels:
      app: {{ .Values.sentinel }}
  template:
    metadata:
      labels:
        app: {{ .Values.sentinel }}
      annotations:
        checksum/secret: {{ include (print $.Template.BasePath "/redis-secret.yaml") . | sha256sum }}
    spec:
      serviceAccountName: sentinel
      initContainers:
      - name: config
        image: {{ .Values.images.redis.image }}
        command: [ "sh", "-c" ]
        env:
          - name: REDIS_PASSWORD
            valueFrom:
              secretKeyRef:
                name: {{ .Values.redisSecretProviderClass.redisSecretName | default "redis-csm-secret" }}
                key: {{ .Values.redisSecretProviderClass.redisPasswordKey | default "K@ravi123!" }}
        args:
          - |
            MASTER_FOUND="false"
            MAX_RETRIES=5

            REPLICAS=$( expr {{ .Values.replicas | int }} - 1)
            SENTINELS=""
            for i in $(seq 0 $REPLICAS)
            do
              SENTINEL="{{ .Values.sentinel }}-$i.{{ .Values.sentinel }}.{{ include "custom.namespace" . }}.svc.cluster.local"
              SENTINELS="$SENTINELS $SENTINEL"
            done

            echo "Sentinel nodes: $SENTINELS"

            for retry in $(seq 0 $MAX_RETRIES)
            do
              for sentinel in $SENTINELS
              do
                echo "Querying Sentinel $SENTINEL for Redis master address..."
                MASTER_INFO=$(redis-cli -h sentinel -p 5000 SENTINEL get-master-addr-by-name mymaster)
                MASTER_HOST=$(echo "$MASTER_INFO" | sed -n '1p')
                MASTER_PORT=$(echo "$MASTER_INFO" | sed -n '2p')

                if [ -n "$MASTER_HOST" ] && [ -n "$MASTER_PORT" ]; then
                  echo "Sentinel reports master at $MASTER_HOST:$MASTER_PORT"
                  ROLE=$(redis-cli --no-auth-warning --raw -h "$MASTER_HOST" -p "$MASTER_PORT" -a "$REDIS_PASSWORD" ROLE | head -n 1)

                  if [ "$ROLE" = "master" ]; then
                    echo "Verified master role at $MASTER_HOST:$MASTER_PORT"
                    MASTER=$MASTER_HOST
                    MASTER_FOUND="true"
                    break
                  else
                    echo "Role mismatch: expected master, got $ROLE"
                  fi
                else
                  echo "No master info from $SENTINEL"
                fi
              done

              if [ "$MASTER_FOUND" = "true" ]; then
                break
              fi

              echo "Retrying in 5 seconds... ($retry/$MAX_RETRIES)"
              sleep 5
            done

            if [ "$MASTER_FOUND" != "true" ]; then
              echo "No master found after $MAX_RETRIES retries. Defaulting to first Redis pod."
              MASTER="{{ .Values.name }}-0.{{ .Values.name }}.{{ include "custom.namespace" . }}.svc.cluster.local"
            fi

            echo "Generating /etc/redis/sentinel.conf for master $MASTER"
            echo "port 5000
            sentinel resolve-hostnames yes
            sentinel announce-hostnames yes
            sentinel monitor mymaster $MASTER 6379 2
            sentinel down-after-milliseconds mymaster 5000
            sentinel failover-timeout mymaster 60000
            sentinel parallel-syncs mymaster 2
            sentinel auth-pass mymaster $REDIS_PASSWORD
            " > /etc/redis/sentinel.conf

            echo "Sentinel configuration:"
            cat /etc/redis/sentinel.conf
        volumeMounts:
        - name: redis-config
          mountPath: /etc/redis/
      containers:
      - name: sentinel
        image: {{ .Values.images.redis.image }}
        command: ["redis-sentinel"]
        args: ["/etc/redis/sentinel.conf"]
        ports:
        - containerPort: 5000
          name: {{ .Values.sentinel }}
        volumeMounts:
        - name: redis-config
          mountPath: /etc/redis/
        - name: data
          mountPath: /data
        {{- if .Values.redisSecretProviderClass.redisSecretName }}
        - name: secrets-store-inline-redis
          mountPath: /etc/csm-authorization/redis
          readOnly: true
        {{- end }}
      volumes:
      - name: redis-config
        emptyDir: {}
      - name: data
        emptyDir : {}
      {{- if .Values.redisSecretProviderClass.redisSecretName }}
      - name: secrets-store-inline-redis
        csi:
          driver: secrets-store.csi.k8s.io
          readOnly: true
          volumeAttributes:
            secretProviderClass: "{{ .Values.redisSecretProviderClass.redisSecretName }}"
      {{- end }}
---
apiVersion: v1
kind: Service
metadata:
  name: {{ .Values.sentinel }}
spec:
  clusterIP: None
  ports:
  - port: 5000
    targetPort: 5000
    name: sentinel
  selector:
    app: sentinel
---
apiVersion: v1
kind: Service
metadata:
 name: {{ .Values.sentinel }}-svc
spec:
 type: NodePort
 ports:
 - port: 5000
   targetPort: 5000
   nodePort: 32003
   name: {{ .Values.sentinel }}-svc
 selector:
   app: {{ .Values.sentinel }}
