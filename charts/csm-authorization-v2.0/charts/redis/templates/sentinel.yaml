apiVersion: v1
kind: ServiceAccount
metadata:
  name: sentinel
  namespace: {{ include "custom.namespace" . }}
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: sentinel-tokenreview-binding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: system:auth-delegator
subjects:
  - kind: ServiceAccount
    name: sentinel
    namespace: {{ include "custom.namespace" . }}
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ .Values.sentinel }}
spec:
  serviceName: {{ .Values.sentinel }}
  replicas: {{ .Values.replicas }}
  selector:
    matchLabels:
      app: {{ .Values.sentinel }}
  template:
    metadata:
      labels:
        app: {{ .Values.sentinel }}
      annotations:
        checksum/secret: {{ include (print $.Template.BasePath "/redis-secret.yaml") . | sha256sum }}
    spec:
      serviceAccountName: sentinel
      initContainers:
      - name: config
        image: {{ .Values.images.redis.image }}
        command: [ "sh", "-c" ]
        env:
          - name: REDIS_PASSWORD
            valueFrom:
              secretKeyRef:
                name: {{ .Values.redisSecretProviderClass.redisSecretName | default "redis-csm-secret" }}
                key: {{ .Values.redisSecretProviderClass.redisPasswordKey | default "K@ravi123!" }}
        args:
          - |
            REPLICAS=$( expr {{ .Values.replicas | int }} - 1)
            MASTER_FOUND="false"
            MAX_RETRIES=5

            for i in $(seq 0 $REPLICAS)
            do
              NODE=$( echo "{{ .Values.name }}-$i.{{ .Values.name }}" )
              NODES=$( echo "$NODES*$NODE" )
            done
            NODES=$(echo $NODES | sed -e "s/"*"/\n/g")

            echo "Discovered Redis nodes: $NODES"
            echo "Starting Redis master detection..."

            for retry in $(seq 0 $MAX_RETRIES)
            do
              for i in $NODES
              do
                HOST="$i.{{ include "custom.namespace" . }}.svc.cluster.local"
                echo "Checking node $HOST for master role..."

                ROLE=$(redis-cli --no-auth-warning --raw -h "$i" -a "$REDIS_PASSWORD" info replication | grep role | awk -F: '{print $2}' | tr -d '\r' | xargs)

                if [ "$ROLE" = "master" ]; then
                  MASTER_FOUND="true"
                  MASTER=$HOST
                  echo "Master found at $MASTER"
                  break
                else
                  echo "Node $HOST is not master (role=$ROLE), retrying in 5 seconds... ($retry/$MAX_RETRIES)"
                  sleep 5
                fi
              done

              if [ "$MASTER_FOUND" = "true" ]; then
                break
              fi
            done

            if [ "$MASTER_FOUND" != "true" ]; then
              echo "No master found after $MAX_RETRIES retries. Defaulting to first node as temporary master."
              MASTER="{{ .Values.name }}-0.{{ .Values.name }}.{{ include "custom.namespace" . }}.svc.cluster.local"
            fi

            echo "Generating /etc/redis/sentinel.conf for master $MASTER"
            echo "port 5000
            sentinel resolve-hostnames yes
            sentinel announce-hostnames yes
            sentinel monitor mymaster $MASTER 6379 2
            sentinel down-after-milliseconds mymaster 5000
            sentinel failover-timeout mymaster 60000
            sentinel parallel-syncs mymaster 2
            sentinel auth-pass mymaster $REDIS_PASSWORD
            loglevel notice
            " > /etc/redis/sentinel.conf

            echo "Sentinel configuration:"
            cat /etc/redis/sentinel.conf
        volumeMounts:
        - name: redis-config
          mountPath: /etc/redis/
      containers:
      - name: sentinel
        image: {{ .Values.images.redis.image }}
        command: ["redis-sentinel"]
        args: ["/etc/redis/sentinel.conf"]
        ports:
        - containerPort: 5000
          name: {{ .Values.sentinel }}
        volumeMounts:
        - name: redis-config
          mountPath: /etc/redis/
        - name: data
          mountPath: /data
        {{- if .Values.redisSecretProviderClass.redisSecretName }}
        - name: secrets-store-inline-redis
          mountPath: /etc/csm-authorization/redis
          readOnly: true
        {{- end }}
      volumes:
      - name: redis-config
        emptyDir: {}
      - name: data
        emptyDir : {}
      {{- if .Values.redisSecretProviderClass.redisSecretName }}
      - name: secrets-store-inline-redis
        csi:
          driver: secrets-store.csi.k8s.io
          readOnly: true
          volumeAttributes:
            secretProviderClass: "{{ .Values.redisSecretProviderClass.redisSecretName }}"
      {{- end }}
---
apiVersion: v1
kind: Service
metadata:
  name: {{ .Values.sentinel }}
spec:
  clusterIP: None
  ports:
  - port: 5000
    targetPort: 5000
    name: sentinel
  selector:
    app: sentinel
---
apiVersion: v1
kind: Service
metadata:
 name: {{ .Values.sentinel }}-svc
spec:
 type: NodePort
 ports:
 - port: 5000
   targetPort: 5000
   nodePort: 32003
   name: {{ .Values.sentinel }}-svc
 selector:
   app: {{ .Values.sentinel }}
