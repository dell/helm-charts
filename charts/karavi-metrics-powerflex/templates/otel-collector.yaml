apiVersion: v1
data:
  otel-collector-config.yaml: {{ (.Files.Get "otel-collector-config.yaml") | quote }}
kind: ConfigMap
metadata:
  name: otel-collector-config

---

{{- $certFile := required "A valid certificate file is required." (.Files.Get (printf "%s" .Values.otelCollector.certificateFile)) }}
apiVersion: v1
data:
  cert.crt: {{ $certFile | quote }}
kind: ConfigMap
metadata:
  name: cert-file-config

---

{{- $certKey := required "A valid key file is required." (.Files.Get (printf "%s" .Values.otelCollector.privateKeyFile)) }}
apiVersion: v1
apiVersion: v1
data:
  cert.key: {{ $certKey | quote }}
kind: ConfigMap
metadata:
  name: key-file-config

---

apiVersion: v1
data:
  nginx.conf: {{ (.Files.Get "nginx.conf") | quote }}
kind: ConfigMap
metadata:
  name: nginx-config

---

apiVersion: v1
kind: Secret
metadata:
  name: tls-secret
data:
  tls.crt: {{ $certFile  | b64enc }}
  tls.key: {{ $certKey | b64enc }}
type: kubernetes.io/tls

---

apiVersion: v1
kind: Service
metadata:
  name: otel-collector
  labels:
    app.kubernetes.io/name: otel-collector
    app.kubernetes.io/instance: {{ .Release.Name }}
spec:
  type: NodePort
  ports:
    - port: 55680
      targetPort: 55680
      name: receiver
    - port: 443
      targetPort: 443
      name: exporter-https
  selector:
    app.kubernetes.io/name: otel-collector
    app.kubernetes.io/instance: {{ .Release.Name }}

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: otel-collector
  labels:
    app.kubernetes.io/name: otel-collector
    app.kubernetes.io/instance: {{ .Release.Name }}
spec:  
  selector:
    matchLabels:
      app.kubernetes.io/name: otel-collector
      app.kubernetes.io/instance: {{ .Release.Name }}
  replicas: 1
  strategy: {}
  template:    
    metadata:
      labels:
        app.kubernetes.io/name: otel-collector
        app.kubernetes.io/instance: {{ .Release.Name }}
    spec:
      volumes:
      - name: tls-secret
        secret:
          secretName: tls-secret
          items:
            - key: tls.crt
              path: tls.crt
            - key: tls.key
              path: tls.key
      - name: nginx-config
        configMap:
          name: nginx-config
      - name: otel-collector-config
        configMap:
          name: otel-collector-config
      - name: cert-file-config
        configMap:
          name: cert-file-config
      - name: key-file-config
        configMap:
          name: key-file-config
      containers:
      - name: nginx-proxy
        image: {{ .Values.nginxProxy.image }}
        volumeMounts:
          - name: tls-secret
            mountPath: /etc/ssl/certs
          - name: nginx-config
            mountPath: /etc/nginx/nginx.conf
            subPath: nginx.conf
      - name: otel-collector
        image: {{ .Values.otelCollector.image }}
        args:
          - --config=/etc/otel-collector-config.yaml
        resources: {}
        volumeMounts:
        - name: otel-collector-config
          mountPath: /etc/otel-collector-config.yaml
          subPath: otel-collector-config.yaml
        - name: cert-file-config
          mountPath: /etc/ssl/certs/cert.crt
          subPath: cert.crt
        - name: key-file-config
          mountPath: /etc/ssl/certs/cert.key
          subPath: cert.key
      restartPolicy: Always
status: {}
